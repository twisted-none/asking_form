import asyncio
import logging
from typing import Dict, Any
import pandas as pd
from io import BytesIO
import os
from datetime import datetime
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_message(bot: Bot, chat_id: str, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.send_message(chat_id=chat_id, text=text)
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def send_document(bot: Bot, chat_id: str, file_bytes: bytes, filename: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        document = BufferedInputFile(file_bytes, filename=filename)
        await bot.send_document(
            chat_id=chat_id,
            document=document,
            caption=caption
        )
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False

def create_excel_file(form_data: Dict[str, Any]) -> bytes:
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏/–æ—Ç–≤–µ—Ç–∞–º–∏"""
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    data = []
    
    for i in range(1, 4):
        question_key = f'question{i}'
        answer_key = f'answer{i}'
        if form_data.get(question_key) and form_data.get(answer_key):
            data.append({
                '–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞': i,
                '–í–æ–ø—Ä–æ—Å': form_data[question_key],
                '–û—Ç–≤–µ—Ç': form_data[answer_key],
                '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏': datetime.now().strftime('%d.%m.%Y %H:%M')
            })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ Excel —Ñ–∞–π–ª
    df = pd.DataFrame(data)
    
    # –°–æ–∑–¥–∞–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        worksheet = writer.sheets['–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã']
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
    
    excel_buffer.seek(0)
    logger.info("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    return excel_buffer.getvalue()

def format_message(form_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    timestamp = datetime.now().strftime('%d.%m.%Y –≤ %H:%M')
    
    message = f"üìù <b>–ù–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏</b>\n"
    message += f"üïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {timestamp}\n\n"
    
    for i in range(1, 4):
        question_key = f'question{i}'
        answer_key = f'answer{i}'
        if form_data.get(question_key) and form_data.get(answer_key):
            message += f"‚ùì <b>–í–æ–ø—Ä–æ—Å {i}:</b>\n{form_data[question_key]}\n\n"
            message += f"‚úÖ <b>–û—Ç–≤–µ—Ç {i}:</b>\n{form_data[answer_key]}\n\n"
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    return message

async def send_form_data(bot_token: str, chat_id: str, form_data: Dict[str, Any]) -> Dict[str, bool]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ + Excel —Ñ–∞–π–ª)"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç {chat_id}")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    results = {
        "message_sent": False,
        "excel_sent": False
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        message_text = format_message(form_data)
        results["message_sent"] = await send_message(bot, chat_id, message_text)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        logger.info("üìä –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª...")
        try:
            excel_bytes = create_excel_file(form_data)
            filename = f"form_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            caption = "üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
            results["excel_sent"] = await send_document(bot, chat_id, excel_bytes, filename, caption)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        
        logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {results}")
        return results
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return results
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await bot.session.close()
            logger.info("üîê –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except:
            pass

async def test_bot_connection(bot_token: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
    bot = Bot(token=bot_token)
    
    try:
        me = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False
    finally:
        try:
            await bot.session.close()
        except:
            pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_test_message(bot_token: str, chat_id: str, message: str = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    finally:
        try:
            await bot.session.close()
        except:
            pass